#include <BH1750.h>
#include <Wire.h>

BH1750 lightMeter;

void setup() {
  Serial.begin(115200);
  
  Wire.begin();

  lightMeter.begin();

  Serial.println(F("BH1750 Test begin"));
}

void loop() {
  float lux = lightMeter.readLightLevel();
  Serial.print("Light: ");
  Serial.print(lux);
  Serial.println(" lx");
  delay(1000);
}
--------------------------------------------------------------------------
#include "DHT.h"

#define DHTPIN 4     

#define DHTTYPE DHT11   

DHT dht(DHTPIN, DHTTYPE);

void setup() {
  Serial.begin(115200);
  Serial.println(F("DHTxx test!"));

  dht.begin();
}

void loop() {

  delay(2000);

  float h = dht.readHumidity();

  float t = dht.readTemperature();

  float f = dht.readTemperature(true);

  if (isnan(h) || isnan(t) || isnan(f)) {
    Serial.println(F("Failed to read from DHT sensor!"));
    return;
  }

  float hif = dht.computeHeatIndex(f, h);

  float hic = dht.computeHeatIndex(t, h, false);

  Serial.print(F("Humidity: "));
  Serial.print(h);
  Serial.print(F("%  Temperature: "));
  Serial.print(t);
  Serial.print(F("°C "));
  Serial.print(f);
  Serial.print(F("°F  Heat index: "));
  Serial.print(hic);
  Serial.print(F("°C "));
  Serial.print(hif);
  Serial.println(F("°F"));
}
--------------------------------------------------------------------------
#include "DHT.h"
#define DHTPIN 4     
#define DHTTYPE DHT11   
#include <BH1750.h>
#include <Wire.h>

BH1750 lightMeter;
DHT dht(DHTPIN, DHTTYPE);

void setup() {
  Serial.begin(115200);
  Serial.println(F("DHTxx test!"));

  dht.begin();
  Serial.begin(115200);
  
  Wire.begin();

  lightMeter.begin();

  Serial.println(F("BH1750 Test begin"));
}

void loop() {
  float lux = lightMeter.readLightLevel();
  Serial.print("Light: ");
  Serial.print(lux);
  Serial.println(" lx");
  delay(1000);

  delay(2000);

  float h = dht.readHumidity();

  float t = dht.readTemperature();

  float f = dht.readTemperature(true);

  if (isnan(h) || isnan(t) || isnan(f)) {
    Serial.println(F("Failed to read from DHT sensor!"));
    return;
  }

  float hif = dht.computeHeatIndex(f, h);

  float hic = dht.computeHeatIndex(t, h, false);

  Serial.print(F("Humidity: "));
  Serial.print(h);
  Serial.print(F("%  Temperature: "));
  Serial.print(t);
  Serial.print(F("°C "));
  Serial.print(f);
  Serial.print(F("°F  Heat index: "));
  Serial.print(hic);
  Serial.print(F("°C "));
  Serial.print(hif);
  Serial.println(F("°F"));
}


--------------------------------------------------------------------------
// Phi_Publish_BH1750.ino
#include <WiFi.h>
#include <PubSubClient.h>

#include <BH1750.h>
#include <Wire.h>
BH1750 lightMeter;

const char* ssid = "pcroom";
const char* password = "12345678";

const char* userId = "mqtt_ship";
const char* userPw = "1234";
const char* clientId = userId;
char* topic = "MyOffice/Indoor/Temp";
const char* serverIPAddress = "192.168.0.21";
WiFiClient wifiClient;
PubSubClient client(serverIPAddress, 1883, wifiClient);

void setup() {
Serial.begin(115200);
Serial.print("\nConnecting to");
Serial.println(ssid);
WiFi.begin(ssid, password);
while (WiFi.status() !=WL_CONNECTED) {
Serial.print(".");
delay(500);
}
Serial.println("\nWiFi Connected");
Serial.print("Local IP address : ");
Serial.println( WiFi.localIP() );

Serial.println("Connecting to broker");
while( !client.connect(clientId, userId, userPw) ) {
Serial.print("*");
delay(1000);
}
Serial.println("Connected to broker!");
Wire.begin();
lightMeter.begin();
}

void loop() {
char buf[20];
  String strLuxValue = String( lightMeter.readLightLevel() );
  strLuxValue.toCharArray(buf, strLuxValue.length() );
  
  client.publish(topic, buf);
  Serial.println(String(topic) + " : " + buf);
  delay(2000);

delay(2000);
}

------------------------------------------------------------------
#include <WiFi.h>
#include <PubSubClient.h>

#include "DHT.h"
#define DHTPIN 4     
#define DHTTYPE DHT11   // DHT 22  (AM2302), AM2321
DHT dht(DHTPIN, DHTTYPE);

const char* ssid = "pcroom";
const char* password = "12345678";

const char* userId = "mqtt_ship";
const char* userPw = "1234";
const char* clientId = userId;
char *topic_t = "MyOffice/Indoor/Temp";
char *topic_h = "MyOffice/Indoor/Humi";
char* server = "192.168.0.21"; 

WiFiClient wifiClient; 
PubSubClient client(server, 1883, wifiClient);

void setup() {
  Serial.begin(115200);
 
  Serial.print("\nConnecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(1000);
  }
  Serial.println("\nWiFi Connected");
  
  Serial.println("Connecting to broker");
  while ( !client.connect(clientId, userId, userPw) ){ 
    Serial.print("*");
    delay(1000);
  }
  Serial.println("\nConnected to broker");
  dht.begin();
}

void loop() {
  char buf[20];
  float h = dht.readHumidity();
  float t = dht.readTemperature();
  if (isnan(h) || isnan(t) ) {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }

  String str = String(h);
  str.toCharArray(buf, str.length());
  client.publish(topic_h, buf);
  Serial.println(String(topic_h) + " : " + buf);
  
  str = String(t);
  str.toCharArray(buf, str.length());
  client.publish(topic_t, buf);
  Serial.println(String(topic_t)  + " : " + buf);
  delay(2000);
}
==========================================================================================
아두이노
// Phi_Publish_DHT11.ino
#include <WiFi.h>
#include <PubSubClient.h>


// ----- DHT11 ------------------------
#include "DHT.h"
#define DHTPIN 4     
#define DHTTYPE DHT11  //DHT11
DHT dht(DHTPIN, DHTTYPE);
// -------------------------------------

const char* ssid = "pcroom";
const char* password = "12345678";

const char* clientId = "mqtt_ship";
const char* userId = clientId;
const char* userPw = "1234";
char *topic_t = "MyOffice/Indoor/Temp";
char *topic_h = "MyOffice/Indoor/Humi";
char* server = "192.168.0.2"; 

WiFiClient wifiClient; 
PubSubClient client(server, 1883, wifiClient);
void setup() {
  Serial.begin(9600);
 
  Serial.print("\nConnecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  Serial.println("\nWiFi Connected");
  
  Serial.println("Connecting to broker");
  while ( !client.connect(clientId, userId, userPw) ){ 
    Serial.print("*");
    delay(1000);
  }
  Serial.println("\nConnected to broker");
  dht.begin();
}
void loop() {
  char buf[20];
  float h = dht.readHumidity();
  float t = dht.readTemperature();
  if (isnan(h) || isnan(t) ) {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }

  String str = String(h);
  str.toCharArray(buf, str.length());
  client.publish(topic_h, buf);
  Serial.println(String(topic_h) + " : " + buf);
  
  str = String(t);
  str.toCharArray(buf, str.length());
  client.publish(topic_t, buf);
  Serial.println(String(topic_t)  + " : " + buf);
  delay(2000);
}
-----------------------------------------------------------
라즈베리파이(nano SubHumiTempInsert.py)
import paho.mqtt.client as mqtt
dbClient = InfluxDBClient(host='localhost', port=8086, username='influx_ship', password='1234',
      database='dbriatech')

def on_connect( client, userdata, flags, rc, properties ):
   print("Connect with result code " + str(rc) )
   client.subscribe("MyOffice/Indoor/#")

def on_message( client, userdata, msg ):
   print( msg.topic +" "+str(msg.payload) )
   topic = msg.topic.split('/')
   json_body = [ ]
   data_point = {
   'measurement': 'sensors',
   'tags': {'Location': ' '},
   'fields': {'Temp': 0.0, 'Humi':0.0}
   }
   data_point['tags']['Location'] = topic[0]
   data_point['tags']['SubLocation'] = topic[1]
   data_point['fields'][topic[2]] = float(msg.payload)
   json_body.append(data_point)
   dbClient.write_points( json_body )

mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2 )
mqttc.username_pw_set(username="mqtt_boy", password="1234")
mqttc.on_connect = on_connect
mqttc.on_message = on_message
mqttc.connect("localhost", 1883, 60)
mqttc.loop_forever( )
---------------------------------------------------------------------
라즈베리파이(python SubHumiTempInsert.py)
---------------------------------------------------------------------
다른 라즈베리파이(influx)
다른 라즈베리파이(use dbriatech)
다른 라즈베리파이(select * from sensors)




