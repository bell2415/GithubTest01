-- EMP 테이블 조회 
SELECT * FROM EMP;
SELECT ENAME, JOB, DEPTNO FROM EMP;

--부서 번호가 20번인 직원 모두 출력하라.
SELECT * FROM EMP
WHERE DEPTNO = 20 OR DEPTNO = 10;

--DNAME 기준으로 내림차순으로 정렬해 보세요.
SELECT DNAME FROM DEPT;
ORDER BY DNAME DESC;
-- EMP 테이블에서 급여가 1500 이상 3000 이하인 모든 직원정보를 출력하세요.
-- 단, BETWEEN A AND B 문법을 사용해 주세요.
SELECT * FROM EMP
WHERE SAL BETWEEN 1500 AND 3000;

-- 전체 직원중에 'CLERK' 'SALESMAN'이 아닌 모든 직원 데이터를 출력하세요.
SELECT * FROM EMP
WHERE JOB != 'CLERK' 
AND JOB != 'SALESMAN';

SELECT * FROM EMP WHERE JOB NOT IN ('CLERK', 'SALESMAN');

--이름에 'S'가 들어가는 데이터를 출력해 봅시다.
SELECT * FROM EMP WHERE ENAME LIKE '%S%';
--이름에 'L'글자가 들어가는 데이터를 출력해 봅시다.
SELECT * FROM EMP WHERE ENAME LIKE '%_L%';

SELECT * FROM EMP WHERE ENAME LIKE '%AM%';

--COMM이 NULL 값인 데이터만 출력하려면?
SELECT * FROM EMP WHERE COMM IS NULL;

--상관이 없는 직원은? MGR값이 NULL인 직원???
SELECT * FROM EMP WHERE MGR IS NULL;
--실습 5-29 OR여난자와 IS NULL같이 사용
SELECT * FROM EMP WHERE SAL > NULL
OR COMM IS NULL;

--오라클 내장함수와 함께 사용
SELECT ENAME, UPPER(ENAME), LOWER(ENAME), INITCAP(ENAME)
FROM EMP;
--이름 비교
SELECT * FROM EMP WHERE UPPER(ENAME) = UPPER('king');

-EMPNO, ENAME, SAL, DEPTNO 부서번호 10 데이터 출력
SELECT EMPNO, ENAME, SAL, DEPTNO
FROM EMP
WHERE DEPTNO = 10
UNION
SELECT EMPNO, ENAME, SAL, DEPTNO
FROM EMP
WHERE DEPTNO = 20;

--집합 연산자를 사용하여 출력하기(출력 열의 자료형이 다를 때)
SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP
WHERE DEPTNO = 10
UNION
SELECT EMPNO, ENAME , SAL, DEPTNO FROM EMP
WHERE DEPTNO = 20;
---------------------------------------------------------------
SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP
WHERE DEPTNO = 10
UNION
SELECT SAL, JOB, DEPTNO, SAL FROM EMP
WHERE DEPTNO = 20;

--차집합
SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP
MINUS
SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP
WHERE DEPTNO = 10;

--교집합
SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP
INTERSECT
SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP
WHERE DEPTNO = 10;

SELECT * FROM EMP WHERE ENAME LIKE '%S';

SELECT EMPNO, ENAME, JOB, SAL, DEPTNO FROM EMP
WHERE DEPTNO = 30 
AND JOB = 'SALESMAN';

SELECT EMPNO, ENAME, JOB, SAL, DEPTNO FROM EMP
WHERE DEPTNO = 30
AND SAL > 2000
OR DEPTNO = 20 
AND SAL > 2000;

SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP
WHERE DEPTNO = 30
AND SAL > 2000
UNION
SELECT EMPNO, ENAME , SAL, DEPTNO FROM EMP
WHERE DEPTNO = 20
AND SAL > 2000;

SELECT * FROM EMP
WHERE SAL <2000
OR SAL >3000;

SELECT ENAME, EMPNO, SAL, DEPTNO FROM EMP
WHERE ENAME LIKE '%E%'
AND DEPTNO =30
AND (SAL <1000
OR SAL >2000);

SELECT * FROM EMP
WHERE (JOB = 'MANAGER' OR JOB = 'CLERK')
AND ENAME NOT LIKE '%_L%'
AND COMM IS NULL;
----------------------------------------------
SELECT * FROM EMP 
WHERE COMM IS NULL 
AND JOB IN('CLERK','MANAGER') 
AND ENAME NOT LIKE '_L%';
--------------------------------------------------
-- P132 길이
SELECT ENAME, 
       LENGTH(ENAME) AS 문자열길이, 
       LENGTHB(ENAME) AS 문자열크기
FROM EMP;

SELECT ENAME, 
       LENGTH('홍길동') AS 문자열길이, 
       LENGTHB('홍길동') AS 문자열크기
FROM DUAL;

SELECT 12 + 5 FROM DUAL;

--문자열 추출 SUBSTRING P134
SELECT JOB, SUBSTR(JOB, 1, 2), SUBSTR(JOB,3,2), SUBSTR(JOB,5)
FROM EMP;

--주민번호 조합
SELECT '991225-1234567', 
       SUBSTR('991225-1234567',1,2) 출생년도,
       SUBSTR('991225-1234567',3,4) 생일,
       SUBSTR('991225-1234567',8,1) 성별
FROM DUAL;

--마이너스 표현
SELECT JOB,
        SUBSTR(JOB, -LENGTH(JOB)),
        SUBSTR(JOB, -LENGTH(JOB), 2),
        SUBSTR(JOB, -3)
FROM EMP;

--INSTR 문자 위치를 찾는 함수
SELECT INSTR('HELLO OREACLE!', 'L', 2, 3)
FROM DUAL;

SELECT INSTR('홍길동이 종로를 돌아다니다 길동을 만났다', '길동', 5, 1)
FROM DUAL;

--수정, 교환 REPLACE
SELECT '010-1234-5678',
       REPLACE('010-1234-5678', '-', ' '),
       REPLACE('010-1234-5678', '-', '-')
FROM DUAL;

--주민번호 991225-1234567
--생일추출
--13자리로 표현
--앞자리 뒷자리 사이 공백으로 표현
SELECT '991225-1234567', 
       SUBSTR('991225-1234567',3,4) 생일,
       REPLACE('991225-1234567','-',''),
       REPLACE('991225-1234567','-',' ')
FROM DUAL;

--6-14
SELECT 
        RPAD('971225-', 14, '*') AS RPAD_JMNO,
        RPAD('010-1234-', 13, '*') AS RPAD_PHONE
    FROM DUAL;
    
--6-15
SELECT CONCAT(EMPNO, ENAME),
       CONCAT(EMPNO, CONCAT(' : ', ENAME))
  FROM EMP
 WHERE ENAME = 'SCOTT';
        
--6-16
SELECT '[' || TRIM(' _ _Oracle_ _ ') || ']' AS TRIM,
       '[' || TRIM(LEADING FROM ' _ _Oracle_ _ ') || ']' AS TRIM_LEADING,
       '[' || TRIM(TRAILING FROM ' _ _Oracle_ _ ') || ']' AS TRIM_TRAILING,
       '[' || TRIM(BOTH FROM ' _ _Oracle_ _ ') || ']' AS TRIM_BOTH
    FROM DUAL;

--ROUND
SELECT 31.4159, 
       ROUND(31.4159, 0),
       ROUND(31.4159, 2),
       ROUND(31.4159, -1),
       ROUND(31.4159, -2)
FROM DUAL;

-버림 TRUNC
SELECT TRUNC(1234.5678),
       TRUNC(1234.5678, 0),
       TRUNC(1234.5678, 1),
       TRUNC(1234.5678, 2),
       TRUNC(1234.5678, -1),
       TRUNC(1234.5678, -2)
FROM DUAL;

-- CEIL 가장 가까운 큰 정수
-- FOOR 가장 가까운 작은 정수
SELECT CEIL(3.14),
       FLOOR(3.14)
FROM DUAL;

--날짜
SELECT SYSDATE 
    SYSDATE - 1 AS "어제",
    SYSDATE + 1 AS "내일"
FROM DUAL;
--이후 몇 개월 후 날짜
SELECT SYSDATE,
       ADD_MONTHS(SYSDATE, 3)
FROM DUAL;
--입사 10주년
SELECT SYSDATE,
       ADD_MONTHS(SYSDATE, 120) AS "입사 10년"
FROM DUAL;

--입사 32년 미만인 사원
SELECT EMPNO, ENAME, HIREDATE, SYSDATE FROM EMP
WHERE ADD_MONTHS(HIREDATE, 120) < SYSDATE;

--마지막 날짜
SELECT SYSDATE,
       NEXT_DAY(SYSDATE, '월요일'),
       LAST_DAY(TO_DATE('24/02/10'))
FROM DUAL;

SELECT NEXT_DAY(NEXT_DAY('24/09/01', '목요일'), '목요일')
FROM DUAL;

--------------------------------------------------------

SELECT 
 NEXT_DAY(TRUNC(TO_DATE('24/09/01', 'YY/MM/DD'), 'MM') + 6, '목요일') 
 FROM DUAL;
 
 -- 실습 6-29
 SELECT SYSDATE
        ROUND(SYSDATE, 'CC'),
        ROUND(SYSDATE, 'YYYY'),
        ROUND(SYSDATE, 'Q'),
        ROUND(SYSDATE, 'DDD')
 FROM DUAL;
 
 --오라클도 자료형(TYPE)이 있다
 SELECT EMPNO, ENAME,EMPNO + '500'
 FROM EMP;
 
 DESC EMP;
 
 --오류
 SELECT SYSDATE, 
        TO_CHAR(SYSDATE), 
        TO_CHAR(SYSDATE, 'YYYY/MM/DD HH24:MI:SS'),
        TO_CHAR(SYSDATE, 'MM') AS "월",
        TO_CHAR(SYSDATE, 'MON') AS "MON",
        TO_CHAR(SYSDATE, 'MONTH') AS "MONTH",
        TO_CHAR(SYSDATE, 'DD') AS DD,
        TO_CHAR(SYSDATE, 'DY') AS DY,
        TO_CHAR(SYSDATE, 'DAY') AS DAY,
        TO_CHAR(SYSDATE, 'MON', 'NLS_DATE_LANGUAGE = JAPANESE') AS "JAN",
        TO_CHAR(SYSDATE, 'MON', 'NLS_DATE_LANGUAGE = ENGLISH') AS "ENG"
 FROM EMP;
 
 --TO_CHAR를 활용한 통화 형식 지정
 SELECT SAL,
        TO_CHAR(SAL, '$999,999') AS "달러",
        TO_CHAR(SAL, 'L999,999') AS "원화",
        TO_CHAR(SAL, '$999,999.00'),
        TO_CHAR(SAL, '0999999.99')
FROM EMP;

--문자 데이터 처리
SELECT 1300 - '1500' FROM DUAL;

--SELECT '1,300' - '1,500' FROM DUAL; --ERROR
SELECT TO_NUMBER('1,300', '999,999') - TO_NUMBER('1,500', '999,999') FROM DUAL;

--TO_DATE
SELECT TO_DATE('2018-07-04', 'YYYY-MM-DD'),
    TO_DATE('2018-07-04', 'RR-MM-DD')
FROM DUAL;

SELECT EMPNO, ENAME, SAL, COMM, SAL + COMM,
       NVL(COMM, 0),
       SAL + NVL(COMM, 0)
FROM EMP;

SELECT COMM, NVL(COMM,500) FROM EMP;
--NVL2
SELECT ENAME, COMM, NVL2(COMM, 'O','X')
FROM EMP;
