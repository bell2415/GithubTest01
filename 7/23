--제약 중복되지 않는 값 UNIQUE
--14-1
DROP TABLE TABLE_UNIQUE;
CREATE TABLE TABLE_UNIQUE(
    LOGIN_ID    VARCHAR2(20) UNIQUE,
    LOGIN_PWD   VARCHAR2(20) NOT NULL,
    TEL         VARCHAR2(20)
);
SELECT * FROM TABLE_UNIQUE;
DESC TABLE_UNIQUE;

--14-15
SELECT OWNER, CONSTRAINT_NAME, CONSTRAINT_TYPE, TABLE_NAME 
FROM USER_CONSTRAINTS
WHERE TABLE_NAME = 'TABLE_UNIQUE';

--14-16
INSERT INTO TABLE_UNNIQUE(LOGIN_ID, LOGIN_PWD, TEL)
VALUES('TEST_ID_01', 'PWD01', '010-1234-5678');
SELECT * FROM TABLE_UNIQUE;

--14-17
INSERT INTO TABLE_UNNIQUE(LOGIN_ID, LOGIN_PWD, TEL)
VALUES('TEST_ID_01', 'PWD01', '010-1234-5678');

--14-18
INSERT INTO TABLE_UNNIQUE(LOGIN_ID, LOGIN_PWD, TEL)
VALUES('TEST_ID_01', 'PWD01', '010-1234-5678');

--14-29
CREATE TABLE TABLE_PK(
    LOGIN_ID VARCHAR2(20) PRIMARY KEY,
    LOGIN_PWD VARCHAR2(20) NOT NULL,
    TEL VARCHAR2(20)
);

SELECT OWNER, CONSTRAINT_NAME, CONSTRAINT_TYPE, TABLE_NAME 
FROM USER_CONSTRAINTS
WHERE TABLE_NAME = 'TABLE_PK%';

--INDEX 확인
SELECT INDEX_NAME, TABLE_OWNER, TABLE_NAME
FROM USER_INDEXES
WHERE TABLE_NAME LIKE 'TABLE_PK%';

--14-32 제약에 이름을 넣자
CREATE TABLE TABLE_PK2(
    LOGIN_ID VARCHAR2(20) CONSTRAINT TBLPK2_LGNID_PK PRIMARY KEY,
    LOGIN_PWD VARCHAR2(20) CONSTRAINT TBLPK2_LGNPW_NN NOT NULL,
    TEL VARCHAR2(20)
);

--삽입 14-33
INSERT INTO TABLE_PK
VALUES ('TEST_ID_01', 'PWD01', '010-1234-5678');

SELECT * FROM TABLE_PK;

--TABLE 작성 방법
DROP TABLE TABLE_PK;
CREATE TABLE TABLE_PK(
    LOGIN_ID    VARCHAR2(20) UNIQUE,
    LOGIN_PWD   VARCHAR2(20) NOT NULL,
    TEL         VARCHAR2(20)
);
CREATE TABLE TABLE_PK(
    LOGIN_ID    VARCHAR2(20),
    LOGIN_PWD   VARCHAR2(20),
    TEL         VARCHAR2(20),
    PRIMARY KEY(LDGIN_ID)
);

실습 14-37 테이블간의 제약조건 살펴보기
SELECT OWNER, CONSTRAINT_NAME, CONSTRAINT_TYPE
FROM USER_CONSTRAINTS
WHERE TABLE_NAME IN('EMP', 'DEPT');
----------------------------------------------
-- 테이블 간의 관계 연관(R) 만들기
DROP TABLE DEPT_FK;
CREATE TABLE DEPT_FK(
    DEPTNO      NUMBER(2) PRIMARY KEY,
    DNAME       VARCHAR2(14),
    LOC         VARCHAR2(13)
);
SELECT * FROM DEPT_FK;

INSERT INTO DEPT_FK
VALUES (10, '개발1팀', '안동');

DELETE FROM DEPT_FK WHERE DEPTNO = 10;

DROP TABLE EMP_FK;
CREATE TABLE EMP_FK(
    EMPNO       NUMBER(4) PRIMARY KEY,
    ENAME       VARCHAR2(10),
    DEPTNO      NUMBER(2) REFERENCES DEPT_FK(DEPTNO) ON DELETE CASCADE
);
SELECT * FROM EMP_FK;
INSERT INTO EMP_FK
VALUES ( 3, '이순신', 10);

DELETE FROM EMP_FK WHERE DEPTNO = 10;
---------------------------------------------------------------------------------------------------------------------------------------------------------------
--제약 중복되지 않는 값 UNIQUE
--14-1
DROP TABLE TABLE_UNIQUE;
CREATE TABLE TABLE_UNIQUE(
    LOGIN_ID    VARCHAR2(20) UNIQUE,
    LOGIN_PWD   VARCHAR2(20) NOT NULL,
    TEL         VARCHAR2(20)
);
SELECT * FROM TABLE_UNIQUE;
DESC TABLE_UNIQUE;

--14-15
SELECT OWNER, CONSTRAINT_NAME, CONSTRAINT_TYPE, TABLE_NAME 
FROM USER_CONSTRAINTS
WHERE TABLE_NAME = 'TABLE_UNIQUE';

--14-16
INSERT INTO TABLE_UNIQUE(LOGIN_ID, LOGIN_PWD, TEL)
VALUES('TEST_ID_01', 'PWD01', '010-1234-5678');
SELECT * FROM TABLE_UNIQUE;

--14-17
INSERT INTO TABLE_UNNIQUE(LOGIN_ID, LOGIN_PWD, TEL)
VALUES('TEST_ID_01', 'PWD01', '010-1234-5678');

--14-18
INSERT INTO TABLE_UNNIQUE(LOGIN_ID, LOGIN_PWD, TEL)
VALUES('TEST_ID_01', 'PWD01', '010-1234-5678');

--14-29
CREATE TABLE TABLE_PK(
    LOGIN_ID VARCHAR2(20) PRIMARY KEY,
    LOGIN_PWD VARCHAR2(20) NOT NULL,
    TEL VARCHAR2(20)
);

SELECT OWNER, CONSTRAINT_NAME, CONSTRAINT_TYPE, TABLE_NAME 
FROM USER_CONSTRAINTS
WHERE TABLE_NAME = 'TABLE_PK%';

--INDEX 확인
SELECT INDEX_NAME, TABLE_OWNER, TABLE_NAME
FROM USER_INDEXES
WHERE TABLE_NAME LIKE 'TABLE_PK%';

--14-32 제약에 이름을 넣자
CREATE TABLE TABLE_PK2(
    LOGIN_ID VARCHAR2(20) CONSTRAINT TBLPK2_LGNID_PK PRIMARY KEY,
    LOGIN_PWD VARCHAR2(20) CONSTRAINT TBLPK2_LGNPW_NN NOT NULL,
    TEL VARCHAR2(20)
);

--삽입 14-33
INSERT INTO TABLE_PK
VALUES ('TEST_ID_01', 'PWD01', '010-1234-5678');

SELECT * FROM TABLE_PK;

--TABLE 작성 방법
DROP TABLE TABLE_PK;
CREATE TABLE TABLE_PK(
    LOGIN_ID    VARCHAR2(20) UNIQUE,
    LOGIN_PWD   VARCHAR2(20) NOT NULL,
    TEL         VARCHAR2(20)
);
CREATE TABLE TABLE_PK(
    LOGIN_ID    VARCHAR2(20),
    LOGIN_PWD   VARCHAR2(20),
    TEL         VARCHAR2(20),
    PRIMARY KEY(LDGIN_ID)
);

실습 14-37 테이블간의 제약조건 살펴보기
SELECT OWNER, CONSTRAINT_NAME, CONSTRAINT_TYPE
FROM USER_CONSTRAINTS
WHERE TABLE_NAME IN('EMP', 'DEPT');

-- 테이블 간의 관계 연관(R) 만들기
DROP TABLE DEPT_FK;
CREATE TABLE DEPT_FK(
    DEPTNO      NUMBER(2) PRIMARY KEY,
    DNAME       VARCHAR2(14),
    LOC         VARCHAR2(13)
);
SELECT * FROM DEPT_FK;

INSERT INTO DEPT_FK
VALUES (10, '개발1팀', '안동');

DELETE FROM DEPT_FK WHERE DEPTNO = 10;

DROP TABLE EMP_FK;
CREATE TABLE EMP_FK(
    EMPNO       NUMBER(4) PRIMARY KEY,
    ENAME       VARCHAR2(10),
    DEPTNO      NUMBER(2) REFERENCES DEPT_FK(DEPTNO) ON DELETE CASCADE
);
SELECT * FROM EMP_FK;
INSERT INTO EMP_FK
VALUES ( 3, '이순신', 10);

DELETE FROM EMP_FK WHERE DEPTNO = 10;

--14-45 테이블 생성 시 CHECK 제약 조건 설정하기
CREATE TABLE TABLE_CHECK(
    LOGIN_ID    VARCHAR2(20) PRIMARY KEY,
    LOGIN_PWD   VARCHAR2(20) CHECK (LENGTH(LOGIN_PWD) > 3),
    TEL         VARCHAR2(20)
);
SELECT * FROM TABLE_CHECK;
INSERT INTO TABLE_CHECK
VALUES ('TEST_ID', '1234', '010-1234-5678');

--기본값을 정하는 DEFAULT
--14-49
DROP TABLE TABLE_DEFAULT;

CREATE TABLE TABLE_DEFAULT(
    LOGIN_ID VARCHAR2(20) PRIMARY KEY,
    LOGIN_PW VARCHAR2(20) DEFAULT '1234',
    TEL      VARCHAR2(20)
);
SELECT * FROM TABLE_DEFAULT;

INSERT INTO TABLE_DEFAULT 
VALUES ('TEST_ID_01', 'ABCD', '010-1111-111');

INSERT INTO TABLE_DEFAULT 
VALUES ('TEST_ID_02', NULL, '010-2222-2222');

INSERT INTO TABLE_DEFAULT (LOGIN_ID)
VALUES ('TEST_ID_03');

INSERT INTO TABLE_DEFAULT (TEL, LOGIN_PW, LOGIN_ID)
VALUES ('010-333-3333', '5678', 'MYID');

CREATE TABLE DEPT_CONST(
    DEPTNO  NUMBER(2)    CONSTRAINT DEPTCONST_DEPTNO_PK PRIMARY KEY,
    DNAME   VARCHAR2(14) CONSTRAINT DEPTCONST_DNAME UNIQUE,
    LOC     VARCHAR2(13) CONSTRAINT DEPTCONST_LOC_NN NOT NULL
);
--------------------------------------------------------------
--PL/SQL
--16-1
SET SERVEROUTPUT ON; --실행 결과를 화면에 출력
BEGIN
    DBMS_OUTPUT.PUT_LINE('hello, PL/SQL!');
END;
/

--한줄 주석 사용하기

DECLARE
 V_EMPNO NUMBER(4) :=7788;
 V_ENAME VARCHAR2(10);
 BEGIN
 V_ENAME := 'SCOTT';
 DBMS_OUTPUT.PUT_LINE('V_ENAME : ' || V_EMPNO);
 DBMS_OUTPUT.PUT_LINE('V_ENAME : ' || V_ENAME);
 END;
 /
 
DECLARE
 V_DEPTNO NUMBER(2);
 V_DNAME VARCHAR2(20);
 V_LOC VARCHAR2(20);
 BEGIN
 V_DEPTNO := 10;
 V_DNAME := '홍길동';
 V_LOC := '안동';
 DBMS_OUTPUT.PUT_LINE('V_ENAME : ' || V_DEPTNO);
 DBMS_OUTPUT.PUT_LINE('V_ENAME : ' || V_DNAME);
 DBMS_OUTPUT.PUT_LINE('V_ENAME : ' || V_LOC);
 END;
 /
DECLARE
    V_TAX CONSTANT NUMBER(1) := 3;
BEGIN
    DBMS_OUTPUT.PUT_LINE('V_TEX : ' || V_TAX);
END;
/

--PL/SQL 변수의 기본값을 설정할 수 있다.
DECLARE
    V_DEPTNO NUMBER(2) DEFAULT 10;
BEGIN
    V_DEPTNO := 50;
    DBMS_OUTPUT.PUT_LINE(V_DEPTNO);
END;
/

--변수에 NOT NULL을 설정하고 값을 대입한 후 출력
DECLARE
    V_DEPTNO NUMBER(2) NOT NULL := 20;
BEGIN
    DBMS_OUTPUT.PUT_LINE(V_DEPTNO);
END;
/

--스칼라형 변수

--참조형 변수
--16-9 참조형의 변수에 값을 대입한 후 출력하기
DECLARE
    V_DEPTNO DEPT.DEPTNO%TYPE DEFAULT 50;
BEGIN
    DBMS_OUTPUT.PUT_LINE('V_DEPTNO : ' || V_DEPTNO);
END;
/

SELECT * FROM DEPT;
DESC DEPT;

--%ROWTYPE
DECLARE
    V_DEPT_ROW DEPT%ROWTYPE;
BEGIN
    SELECT DEPTNO, DNAME, LOC INTO V_DEPT_ROW
     FROM DEPT
    WHERE DEPTNO = 40;
        DBMS_OUTPUT.PUT_LINE('DEPTNO : ' || V_DEPT_ROW.DEPTNO);
        DBMS_OUTPUT.PUT_LINE('DNAME : ' || V_DEPT_ROW.DNAME);
        DBMS_OUTPUT.PUT_LINE('LOC : ' || V_DEPT_ROW.LOC);
END;
/

DECLARE
    V_NUMBER NUMBER DEFAULT 13;
BEGIN
    IF MOD(V_NUMBER, 2) = 1 THEN
        DBMS_OUTPUT.PUT_LINE('홀수 입니다');
    ELSE
        DBMS_OUTPUT.PUT_LINE('짝수 입니다');
    END IF;
END;
/

--16-14
--16-15 CASE문 (switch case)
DECLARE
    V_SCORE NUMBER DEFAULT 87;
BEGIN
    CASE TRUNC(V_SCORE/10)
        WHEN 10 THEN DBMS_OUTPUT.PUT_LINE('A학점');
        WHEN 8 THEN DBMS_OUTPUT.PUT_LINE('B학점');
        ELSE DBMS_OUTPUT.PUT_LINE('A학점');
    END CASE;
END;
/

--기본 LOOP 사용하기
DECLARE
    V_NUM NUMBER := 0;
BEGIN
    LOOP
        DBMS_OUTPUT.PUT_LINE(V_NUM);
        V_NUM := v_NUM + 1;
        EXIT WHEN V_NUM > 4;
    END LOOP;
END;
/

--WHILE문 사용하기
DECLARE
    V_NUM NUMBER := 0;
BEGIN
    WHILE v_NUM < 4 LOOP
        DBMS_OUTPUT.PUT_LINE(V_NUM);
        V_NUM := v_NUM +1;
    END LOOP;
END;
/

DECLARE
BEGIN
 FOR i IN 0..4 LOOP
    DBMS_OUTPUT.PUT_LINE(i);
 END LOOP;
END;
/ 

--WHILE
DECLARE
    i NUMBER DEFAULT 0;
BEGIN
    WHILE i < 10 LOOP
        IF MOD(i, 2) = 1 THEN DBMS_OUTPUT.PUT_LINE(i);
        END IF;
        i := i + 1;
    END LOOP;
END;
/

--FOR
BEGIN
 FOR i IN 1..10 LOOP
    IF MOD(i, 2) = 1 THEN DBMS_OUTPUT.PUT_LINE(i);
    END IF;
 END LOOP;
END;
/
